<?php

namespace App\Services\Invoice\Api;

use App\Enums\Billing\PaymentMethodEnum;
use App\Models\Billing\Building;
use App\Models\Billing\Collection;
use App\Models\Billing\Customer;
use App\Models\Billing\Invoice;
use App\Services\Invoice\Api;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Collection as Entries;
use NFePHP\Common\Keys;
use NFePHP\Common\UFList;
use NFePHP\NFe\Complements;
use NFePHP\NFe\Make as Nfe;
use stdClass;

/**
 * Create the Invoice XML with the given data.
 * 
 * @source /resources/docs/NF-e.md - Invoice documentation (PT-BR)
 */
class Maker extends Api
{
    /**
     * The Invoice Maker.
     *
     * @var Nfe
     */
    protected $nfe;

    /**
     * The Invoice Complements.
     *
     * @var Complements
     */
    protected $complements;

    /**
     * Create the Invoice XML maker.
     *
     * @param Nfe $nfe
     */
    public function __construct(Nfe $nfe, Complements $complements) 
    {
        $this->nfe = $nfe;
        $this->complements = $complements;

        parent::__construct();
    }

    /**
     * Make the invoice xml.
     *
     * @param Invoice $invoice
     * @return string
     */
    public function make(Invoice $invoice): string
    {
        // Make the information tag
        $this->makeNfeInfoTag();

        // Make the identification tag
        $this->makeNfeIdentificationTag($invoice);

        // Make the authorization tag
        $this->makeAuthorizationTag($invoice);

        // Make the issuer tag
        $this->makeIssuerTag();

        // Make the address issuer tag
        $this->makeIssuerAddressTag();

        // Make the recipient tag
        $this->makeRecipientTag($invoice->collection->customer);

        // Make the address recipient tag
        $this->makeRecipientAddressTag($invoice->collection->customer->building);

        // Make the products tag
        $this->makeProductsTag($invoice->itens);

        // Make the payment method tag
        $this->makePaymentMethodTag($invoice->collection);

        return $this->nfe->getXML();
    }

    /**
     * Sign the invoice xml.
     *
     * @param string $xml
     * @return string
     */
    public function sign(string $xml): string
    {
        return $this->tools->signNFe($xml);
    }

    /**
     * Protocol the invoice xml.
     *
     * @param string $xml
     * @param string $protocol
     * @return string
     */
    public function protocol(string $xml, string $protocol): string 
    {
        return $this->complements->toAuthorize($xml, $protocol);
    }

    /**
     * Create the invoice info tags.
     *
     * @return \stdClass
     */
    protected function makeNfeInfoTag()
    {
        $std = new \stdClass();

        // NFe version
        $std->versao = config('billing.invoice.version');

        $this->nfe->taginfNFe($std);
    }

    /**
     * Create the invoice identification tags.
     *
     * @return \stdClass
     */
    protected function makeNfeIdentificationTag(Invoice $invoice)
    {
        $std = new \stdClass();

        // State code of the issuer of the Tax Document
        $std->cUF = UFList::getCodeByUF(config('executive_classes.address.uf.name'));

        // Numeric Code that makes up the Access Key
        // Leave null so that it is automatically generated by the method.
        $std->cNF = null;

        // Description of the Operation
        $std->natOp = 'PRESTAÇÃO DE SERVIÇO';

        // Tax Document Template Code
        $std->mod = 55; 

        // Tax Document Series
        $std->serie = 1;

        // Tax Document Number (Id)
        $std->nNF = $invoice->id;

        // Date and time of issue of the Tax Document
        $std->dhEmi = Carbon::now()->format('Y-m-d\TH:i:s.uP');

        // Operation type
        $std->tpNF = 1;

        // Identificador de local de destino da operação
        $std->idDest = 1;

        // Código do Município de Ocorrência do Fato Gerador
        $std->cMunFG = config('executive_classes.address.city.code');

        // DANFE Print Format
        $std->tpImp = 1; 

        // Type of Invoice Emission
        $std->tpEmis = 1;

        // Invoice Access Key Check Digit
        $std->cDV = $this->getCheckDigit(
            $std->cUF,
            getYear(),
            getMonth(),
            config('executive_classes.cnpj'),
            $std->mod,
            $std->serie,
            $std->nNF,
            $std->tpEmis
        );

        // Identificação do Ambiente
        $std->tpAmb = config('billing.invoice.config.tpAmb');

        // Purpose of issuing the Invoice
        $std->finNFe = 1;

        // Indicates operation with final consumer
        $std->indFinal = 0;

        // Broker / marketplace indicator 
        // 0=Operação sem intermediador (em site ou plataforma própria)
        // 1=Operação em site ou plataforma de terceiros (intermediadores/marketplace)
        $std->indIntermed = 0;

        // Indicator of presence of the buyer in the commercial establishment at the time of the operation
        $std->indPres = 2;

        // Process of issuing the Invoice
        $std->procEmi = '0';

        // Process version of issuing the Invoice
        $std->verProc = 1;

        $this->nfe->tagide($std);
    }

    /**
     * Create the invoice authorization tags.
     *
     * @param Invoice $invoice
     * @return void
     */
    protected function makeAuthorizationTag(Invoice $invoice)
    {
        foreach ($invoice->getAuthorizedUsers() as $user) {
            $std = new stdClass();

            if ($user->hasCnpj()) {
                $std->CNPJ = $user->getCnpj();
            }

            if ($user->hasCpf()) {
                $std->CPF = $user->getCpf();
            }

            $this->nfe->tagautXML($std);
        }
    }

    /**
     * Create the invoice issuer tags.
     *
     * @return void
     */
    protected function makeIssuerTag()
    {
        $std = new \stdClass();

        // Issuer CNPJ
        $std->CNPJ = config('executive_classes.cnpj');
        
        // Company name or Name of the issuer
        $std->xNome = config('executive_classes.name');

        // Issuer trade name
        $std->xFant = config('executive_classes.trade_name');
        
        // Issuer State Registration (IE)
        $std->IE = config('executive_classes.ie');

        // Tax Regime Code
        $std->CRT = 1;

        $this->nfe->tagemit($std);
    }

    /**
     * Create the invoice issuer address tags.
     *
     * @return void
     */
    protected function makeIssuerAddressTag()
    {
        $std = new \stdClass();

        // Address
        $std->xLgr = config('executive_classes.address.street');

        // Number
        $std->nro = config('executive_classes.address.number');

        // Complement
        $std->xCpl = config('executive_classes.address.complement');

        // Neighborhood
        $std->xBairro = config('executive_classes.address.neighborhood');

        // City code
        $std->cMun = config('executive_classes.address.city.code');

        // City name
        $std->xMun = config('executive_classes.address.city.name');

        // State name
        $std->UF = config('executive_classes.address.uf.name');
        
        // ZIP code
        $std->CEP = config('executive_classes.address.zip');

        // Country code
        $std->cPais = config('executive_classes.address.country.code');

        // Country name
        $std->xPais = config('executive_classes.address.country.name');

        $this->nfe->tagenderEmit($std);
    }

    /**
     * Make the invoice recipient tags.
     *
     * @param Customer $customer
     * @return void
     */
    protected function makeRecipientTag(Customer $customer)
    {
        $std = new \stdClass();

        // Company name or name of the recipient
        $std->xNome = $customer->name;

        // Recipient's CNPJ
        if ($customer->hasCnpj()) {
            $std->CNPJ = $customer->getCnpj();
        }

        // Recipient's CPF
        if ($customer->hasCpf()) {
            $std->CPF = $customer->getCpf();
        }

        // Recipient's IE indicator
        $std->indIEDest = 2;

        // Recipient's IE
        if ($customer->hasIe()) {
            $std->indIEDest = 1;
            $std->IE = $customer->getIe();
        } 

        $this->nfe->tagdest($std);
    }

    /**
     * Create the invoice recipient address tags.
     *
     * @param Building $building
     * @return void
     */
    protected function makeRecipientAddressTag(Building $building)
    {
        $std = new \stdClass();
        
        // Address
        $std->xLgr = $building->street;
        
        // Number
        $std->nro = $building->number;
        
        // Complement
        $std->xCpl = $building->complement;
        
        // Neighborhood
        $std->xBairro = $building->number;
        
        // City code
        $std->cMun = $building->city_code;
        
        // City name
        $std->xMun = $building->city;
        
        // State name
        $std->UF = $building->state;
        
        // ZIP code
        $std->CEP = format_zip($building->zip_code);
        
        // Country code
        $std->cPais = $building->country;
        
        // Country name
        $std->xPais = $building->country_code;

        $this->nfe->tagenderDest($std);
    }

    /**
     * Make the invoice products tags.
     *
     * @param Entries $invoiceItems
     * @return void
     */
    protected function makeProductsTag(Entries $invoiceItems)
    {
        foreach ($invoiceItems as $key => $item) {
            $std = new \stdClass();

            // Identifier
            $std->item = $key + 1;

            // Product or service code (ID)
            $std->cProd = $item->id;

            // Product or service description
            $std->xProd = $item->description;

            // NCM code with 8 digits or 2 digits (gender)
            $std->NCM = '00';

            // Tax Code of Operations and Installments
            $std->CFOP = '5762';

            // Product Commercial Unit
            $std->uCom = 'HORA';

            // Commercial quantity of the product
            $std->qCom = $item->qty;

            // Unit Value of Commercialization of the product
            $std->vUnCom = $item->unity_price;

            // Total Gross Value of Products or Services
            $std->vProd = $item->price;

            // Product Taxable Unit
            $std->uTrib = 'HORA';

            // Taxable Quantity of the product
            $std->qTrib = $item->qty;

            // Unit value of taxation of the product
            $std->vUnTrib = $item->unity_price;

            // Indicates whether the item's value (vProd) enters the total value of the NF-e (vProd)
            $std->indTot = 1;

            $this->nfe->tagprod($std);
        }
    }

    /**
     * Make the invoice payment method tags.
     *
     * @param Collection $collection
     * @return void
     */
    protected function makePaymentMethodTag(Collection $collection)
    {
        $std = new stdClass();

        // Payment Method Indicator
        $std->indPag = '';  // @todo A vista ou a prazo
        
        // Payment Amount
        $std->vPag = $collection->amount;

        // Payment Method
        $std->tPag = $collection->paymentMethod->invoice_code;

        if ($collection->payment_method_id == PaymentMethodEnum::CREDIT_CARD) {
            $std->CNPJ = ''; /** @todo CNPJ do emitente */
            $std->tBand = ''; /** @todo Bandeira do cartão */
            $std->cAut = ''; /** @todo Código de autorização */
        }

        $this->nfe->tagdetPag($std);
    }

    /**
     * Build the check digit.
     *
     * @param string $cUF
     * @param string $ano
     * @param string $mes
     * @param string $cnpj
     * @param string $mod
     * @param string $serie
     * @param string $numero
     * @param string $tpEmis
     * @return string
     */
    private function getCheckDigit($cUF, $ano, $mes, $cnpj, $mod, $serie, $numero, $tpEmis): string
    {
        $key = Keys::build($cUF, $ano, $mes, $cnpj, $mod, $serie, $numero, $tpEmis);
        return substr($key, -1);
    }

}